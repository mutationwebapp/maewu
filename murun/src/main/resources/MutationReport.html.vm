<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" crossorigin="anonymous">


    <style type="text/css">
      body {
        padding: 80px 0 10px;
      }
      .crawl-path {
        padding: 20px 0;
      }
      .crawl-path .edge {
        display: inline-block;
        line-height: 100%;
        vertical-align: super;
      }
      .crawl-path .edge .edge-text {
        border-bottom: solid 2px black;
        padding: 0 7px 2px 0;
        color: #555;
        font: bold 70% Monaco, Consolas, Menlo, Courier
      }
      .crawl-path .edge .edge-arrow {
        width: 0; 
        height: 0; 
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-left: 10px solid currentColor;
        display: inline-block;
        vertical-align: -100%;
      }

      .HoverDiv h1, .HoverDiv img {
      max-width: 100%;
      text-align:center;
      -moz-transition: all 0.3s;
      -webkit-transition: all 0.3s;
      transition: all 0.3s;
      /* z-index: 9999; */
    }

    .HoverDiv:hover h1, .HoverDiv:hover img {
      -moz-transform: scale(2);
      -webkit-transform: scale(2);
      transform: scale(2);
       z-index:555555 !important;

    }

    .overlay {
      position: fixed;
      display: none;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0,0,0,0.9);
      z-index: 99;
      cursor: pointer;
    }
    </style>

  </head>

<body>
    <div class="container">
       
      <h5>${subject}</h5>

      <div class="container container-sm">

            <div class="pb-2 mt-4 mb-2 border-bottom">
             <h2>Mutation summary</h2>
            </div>

            <div class="container p-4 my-2 border" id="overallResult">

            </div>
       </div>
       
       <div class="pb-2 mt-4 mb-2 border-bottom">
         <h2> Method Results</h2>
        </div>

    
       <div id="test-results-table">
        <div class="row">
          <div class="col-2"> <h4>Type</h4></div>
          <div class="col-6"><h4>Target</h4></div>
          <div class="col-2"><h4>Result</h4></div>
          <div class="col-2" align="right"><h4>Coverage</h4></div>
        </div>
        </div>
    </div>

        <!-- <button onclick="showOverlay2()"> showOverlay </button> -->
     <div id='overlayDiv2' class='overlay'>
        <div class="card" style="background-color: white; position: absolute; height: 80%; width: 80%; margin-top: 10%; margin-left: 10%;">
        <div class='card-header'>
      <div class='row'>
      <div id="overlayHeading2" class='col-11'> </div>
      <div class='col-1 btn-primary' onclick='hideOverlay2()'> <h5> X </h5> </div>
      </div>
        </div>
        <div id='overlayContent2' class='card-body'>
        </div>
        </div>
    </div>

    <!-- <button onclick="showOverlay()"> showOverlay </button> -->
     <div id='overlayDiv' class='overlay'>
        <div class="card" style="background-color: white; position: absolute; height: 80%; width: 80%; margin-top: 10%; margin-left: 10%;">
        <div class='card-header'>
      <div class='row'>
      <div id="overlayHeading" class='col-11'> </div>
      <div class='col-1 btn-primary' onclick='hideOverlay()'> <h5> X </h5> </div>
      </div>
        </div>
        <div id='overlayContent' class='card-body'>
          <div class='card details-table'>
          </div>
          <div id="coverageCarousel" class="card carousel slide" data-ride="carousel">
           <!--  <ol class="carousel-indicators">
              <li data-target="#carouselExampleCaptions" data-slide-to="0" class="active"></li>
              <li data-target="#carouselExampleCaptions" data-slide-to="1"></li>
              <li data-target="#carouselExampleCaptions" data-slide-to="2"></li>
            </ol> -->
            <div class="carousel-inner">
              <div class="carousel-item">
                <img src="../4/dummy/DummyTest/26.png" class="d-block w-100" alt="...">
                <div class="carousel-caption d-none d-md-block">
                  <h5>Third slide label</h5>
                  <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>
                </div>
              </div>
            </div>
            <a class="carousel-control-prev" href="#coverageCarousel" role="button" data-slide="prev">
              <span class="carousel-control-prev-icon bg-primary" aria-hidden="true"></span>
              <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#coverageCarousel" role="button" data-slide="next">
              <span class="carousel-control-next-icon bg-primary" aria-hidden="true"></span>
              <span class="sr-only">Next</span>
            </a>
          </div>
        </div>
        </div>
    </div>

  <!-- <button onclick="showOverlay_images()"> showOverlay </button> -->
    <div id='overlayDiv_images' class='overlay'>
      
        <div class="" style="background-color: white; position: absolute; height: 90%; width: 90%; margin-top: 5%; margin-left: 5%;">
        <div class=''>
      <div class='row'>
      <div id="overlayHeading_images" class='col-11'> 

      <nav class="navbar navbar-default" >
        <div class="container-fluid">
        <ul class="navbar-header">
          <li class="navbar-brand">
            <h4>Applied Mutations</h4>
          </li>
        </ul>
        <ul class="nav navbar-nav">
          <li class="nav-item active" >
            <a class="nav-link active" href="#" id = "nextButton">Next</a>
          </li>

        </ul>
        <ul class="nav navbar-nav">
          <li class="nav-item active">
            <a class="nav-link active" href="#" id = "prevButton">Previous</a>
          </li>
        </ul>
        </div>

      </nav>


      </div>
      <div class='col-1 btn-primary' onclick='hideOverlay_images()'> <h5> X </h5> </div>
      </div>
        </div>
        <div id='overlayContent_images'>


    <div class="card" id="imagePanel" style="overflow:auto;height: 95%; width: 100%; position:absolute;">
    <div class="card-header form-group-row">
    
        <div id = "imageHeading">
          <span id="currentImageNumber" class='badge'></span>
          <strong>Images to Compare </strong>
          <dummy></dummy>
        </div>
        <div >
        <button id = "zoomInButton"><i class="fa fa-search-plus"></i>  </button>
        <button id = "zoomOutButton"><i class="fa fa-search-minus"></i> </button>
        <input id = "zoomValueField" class = "text" placeholder="value & press enter"> 
      </div>
      </div>
    
    <div class="card-body" style="overflow:auto; max-width:100%;">
        
      <div id= "imagesToCompare" style="overflow:auto; max-width:100%;">
        <div class="container" style="overflow:auto; max-width:100%;">
          <div class="col-lg-12"></div> 

          <div class="row">
            <div class="col-lg-6 Limage">
              <div class="row text-center LimageLabel"> 
                <div class='col-4'> <span class='badge badge-secondary binBadge'> </span> </div> 
                  <div class='col-5'> <a href="dummy"> url </a> </div>
              </div> 
              <img src=""  class="card img-responsive limg" alt="state1">
            </div>

            <div class="col-lg-6 Rimage"> 
              <div class="row text-center RimageLabel"> 
                <div class='col-4'> <span class='badge badge-secondary binBadge'> </span> </div>
                <div class='col-5'> <a href="dummy"> url </a> </div>
               </div>
              <img src="" class="card img-responsive rimg" alt="state2">
            </div>
          </div>
        
      </div>
    </div>
    
  </div>

        </div>
        </div>
    </div>

    <script type="text/javascript">

      var successImageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeD0iMHB4IiB5PSIwcHgiIHZpZXdCb3g9IjAgMCA0MjYuNjY3IDQyNi42NjciIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDQyNi42NjcgNDI2LjY2NzsiIHhtbDpzcGFjZT0icHJlc2VydmUiIHdpZHRoPSI1MTJweCIgaGVpZ2h0PSI1MTJweCI+CjxwYXRoIHN0eWxlPSJmaWxsOiM2QUMyNTk7IiBkPSJNMjEzLjMzMywwQzk1LjUxOCwwLDAsOTUuNTE0LDAsMjEzLjMzM3M5NS41MTgsMjEzLjMzMywyMTMuMzMzLDIxMy4zMzMgIGMxMTcuODI4LDAsMjEzLjMzMy05NS41MTQsMjEzLjMzMy0yMTMuMzMzUzMzMS4xNTcsMCwyMTMuMzMzLDB6IE0xNzQuMTk5LDMyMi45MThsLTkzLjkzNS05My45MzFsMzEuMzA5LTMxLjMwOWw2Mi42MjYsNjIuNjIyICBsMTQwLjg5NC0xNDAuODk4bDMxLjMwOSwzMS4zMDlMMTc0LjE5OSwzMjIuOTE4eiIvPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K";
      var failureImageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDUwIDUwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MCA1MDsiIHhtbDpzcGFjZT0icHJlc2VydmUiIHdpZHRoPSI1MTJweCIgaGVpZ2h0PSI1MTJweCI+CjxjaXJjbGUgc3R5bGU9ImZpbGw6I0Q3NUE0QTsiIGN4PSIyNSIgY3k9IjI1IiByPSIyNSIvPgo8cG9seWxpbmUgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I0ZGRkZGRjtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMDsiIHBvaW50cz0iMTYsMzQgMjUsMjUgMzQsMTYgICAiLz4KPHBvbHlsaW5lIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiNGRkZGRkY7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTA7IiBwb2ludHM9IjE2LDE2IDI1LDI1IDM0LDM0ICAgIi8+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+Cjwvc3ZnPgo=";

      var hideOverlay = function(){
          $("#overlayDiv")[0].style.display = "none";
      }
      var showOverlay = function(){
          $("#overlayDiv")[0].style.display = "block";
      }
    var hideOverlay_images = function(){
      $("#overlayDiv_images")[0].style.display = "none";
    }
    var showOverlay_images = function(){
      $("#overlayDiv_images")[0].style.display = "block";
    }

    var showOverlay2 = function(){
          $("#overlayDiv2")[0].style.display = "block";
      }
      var hideOverlay2 = function(){
          $("#overlayDiv2")[0].style.display = "none";
      }


////////////////////////////////////////////////////////////////////////////

    imageZoom = 1;

    pairs=[];
    currentImage = 0;

    currentMethodInfo = null;


  function zoomOutImage(){
    if(imageZoom >= 0.2){
      imageZoom -= 0.1;
    }
    else{
      return;
    }

    $("img.card.img-responsive").css('zoom', imageZoom);
    $("#zoomValueField").val(Math.trunc(imageZoom*100));

  }

  function zoomInImage(){
    if(imageZoom <= 5.0){
      imageZoom += 0.1;
    }
    else{
      return;
    }

    $("img.card.img-responsive").css('zoom', imageZoom);
    $("#zoomValueField").val(Math.trunc(imageZoom*100));
  }

  function setZoomValue(zoomValueInput){
    if(zoomValueInput >10 && zoomValueInput < 500){
      imageZoom = zoomValueInput/100;
    }
    else{
      imageZoom = 1;
    }
    $("img.card.img-responsive").css('zoom', imageZoom);
    $("#zoomValueField").val(Math.trunc(imageZoom*100));
  }


    function getImages(){

    }

    function loadNextImage(){
      currentImage += 1;
      
      updated = updateStateForCurrentImage();

      
      if(currentImage == pairs.length){
        return;
      }

      if(updated){
        showImage();
      }
    }

    function loadPreviousImage(){

      currentImage-=1;
      updated = updateStateForCurrentImage();

      if(currentImage <= 0 ){
        return;
      }

      if(updated){
        showImage();
      }

    }

    function showImage(){

  //      $("#imageToShow").html($("#imagesToCompare").html());
        var limageSrc =  pairs[currentImage]["state1"] ;
        var rimageSrc =  pairs[currentImage]["state2"] ;
        limg = $(".Limage>img");
        rimg = $(".Rimage>img");
        limg.attr("src", limageSrc);
        rimg.attr("src", rimageSrc);

  //      var pic_real_width_L, pic_real_height_L;
        $("<img/>") // Make in memory copy of image to avoid css issues
          .attr("src", limg.attr("src"))
          .on('load',function() {
            // console.log("here");
            var pic_real_width_L = this.width;   // Note: $(this).width() will not
            var pic_real_height_L = this.height; // work for in memory images.

            currentMaxWidth = $(".Limage>").css('width');
//            imageZoom = currentMaxWidth/pic_real_width_L;
            if(currentMaxWidth == "none"){
//              currentMaxWidth = $("#imagesToCompare>.container").css('max-width', pic_real_width_L*2);
              imageZoom = 1;
            }
            else{
//              if( currentMaxWidth < pic_real_width_L*2){
//                currentMaxWidth = $("#imagesToCompare>.container").css('max-width', pic_real_width_L*2);  
//              }
              imageZoom = parseInt(currentMaxWidth)/(pic_real_width_L);
              
              setZoomValue(100*imageZoom);
            }
          });

//        $("<img/>") // Make in memory copy of image to avoid css issues
//          .attr("src", rimg.attr("src"))
//          .on('load', function() {
//            var pic_real_width_R = this.width; 
//            currentMaxWidth = $("#imagesToCompare>.container").css('max-width');
//            if(currentMaxWidth == "none"){
//              currentMaxWidth = $("#imagesToCompare>.container").css('max-width', pic_real_width_R*2);
//            }
//            else{
//              if( currentMaxWidth < pic_real_width_R*2){
//                currentMaxWidth = $("#imagesToCompare>.container").css('max-width', pic_real_width_R*2);  
//              }
//            }

//  //          console.log(this.width);  // Note: $(this).width() will not
//            var pic_real_height_R = this.height; // work for in memory images.
//          });



//          $("#imageToShow>.container").width(window.innerWidth - 50);

    }


  function updateStateForCurrentImage(){

//    $("#imageHeading>strong").html("Showing record " + (currentImage+1) + " of " + pairs.length);

    if(currentImage >= pairs.length ){
      $("#nextButton").hide();
      $("#prevButton").show();
      currentImage = pairs.length -1;
      return false;
    }
    else if(currentImage < 0 ){
      $("#nextButton").show();
      $("#prevButton").hide();
      currentImage = 0;
      return false;
    }
    else {
      $("#prevButton").show();
      $("#nextButton").show();
    }

    $("#imageHeading>dummy").html('');
    $("#imageHeading>strong").html(pairs[currentImage]['record'][0]['operator']);
    $("#currentImageNumber").html((currentImage+1) + " of " + pairs.length);


    
    var state1 = pairs[currentImage]["state1"]
    var state2 = pairs[currentImage]["state2"]
    
    //$('.LimageLabel>div>strong').html("original")
    //$('.RimageLabel>div>strong').html("mutated");
    
    $('.LimageLabel>div>a').html("original");
    $('.LimageLabel>div>a').attr('href',state1);
    
    $('.RimageLabel>div>a').html("mutated");
    $('.RimageLabel>div>a').attr('href', state2);

    $('.LimageLabel>div>.binBadge').html(pairs[currentImage]['record'][0]['originalXpath']);

      
    $('.RimageLabel>div>.binBadge').html(pairs[currentImage]['record'][0]['mutatedXpath']);

  
//    imageZoom = 1;
    $("#zoomValueField").val(Math.trunc(imageZoom*100));
    setZoomValue(Math.trunc(imageZoom*100));
//    $("#imagesToCompare").css('zoom', imageZoom);
   
    return true;

  }


/////////////////////////////////////////////////////////////////////////////////

      var showCoverageDetail = function(evt){
        var rowId = parseInt(evt.parentElement.getAttribute('rowId'));
        var coverageMap = methods[rowId].candidate.coverageMap;
        if(!coverageMap){
        	console.log("No coverage Map available for candidate");
        	return;
        }
        var coverageDetail = "<table class='table'>";
        coverageDetail += "<tr>";
        coverageDetail += "<th> Location </th>";
        coverageDetail += "<th> ElementAccess </th>";
        coverageDetail += "<th> AccessType </th>";
        coverageDetail += "<th> State </th>";
        coverageDetail += "</tr>";
        for(coverage of coverageMap){
          coverageDetail += "<tr>";
          coverageDetail += "<td>" +  coverage.statementName + "</td>";
          coverageDetail += "<td>" +  coverage.accessType + "</td>";
          coverageDetail += "<td>" +  coverage.coverage + "</td>";
          coverageDetail += "<td>" +  coverage.state + "</td>";
          coverageDetail += "</tr>";
        }
        coverageDetail += "</table>"
        $("#overlayHeading").html("<h5> Coverage Details : " +  methods[rowId].candidate.xpath+ "<h5>");
        $("#overlayContent>.details-table").html(coverageDetail);
       
        //var subject = methodInfo.runFolder.split('/')[1];
        //traceFolder = '../../../../trace/' + subject;
        crawlImages = traceFolder + '/' + testSuiteName + '/crawls/crawl0/screenshots/';

        testName = coverage.statementName.substring(0, coverage.statementName.lastIndexOf('_'));

        lineNumber = coverage.statementName.substring(
          coverage.statementName.lastIndexOf('_')+1, coverage.statementName.length);

        var carouselStr = '';
        for(coverage of coverageMap){
          carouselStr += '<div class="carousel-item">';
          carouselStr += '<img src="'+ crawlImages + 'cov' + coverage.state + '.png' + '" class="d-block w-100" alt="...">';
           carouselStr +=      '<div class="carousel-caption d-none d-md-block" style="background-color:rgba(0,0,0,0.2);">';
            carouselStr +=       '<h5>' + coverage.statementName +'</h5>';
           carouselStr +=        '<p>' + coverage.accessType + ' : ' + coverage.coverage +'</p>';
            carouselStr +=     '</div>';
           carouselStr +=    '</div>';
        }

        $('div.carousel-inner').html(carouselStr);
        if(coverageMap && coverageMap.length>0){
          $($('.carousel-item')[0]).attr('class', 'carousel-item active')
        }
        // $('.carousel').carousel('cycle')
        showOverlay();
      } 

      var showTestDetail = function(evt){
        var rowId = parseInt(evt.parentElement.getAttribute('rowId'));
        currentMethodInfo = methods[rowId];
        var failedTests = currentMethodInfo.failedTests;
        var coverageDetail = "<table class='table'>";
        coverageDetail += "<tr>";
        coverageDetail += "<th> TestName </th>";
        coverageDetail += "<th> FailureMessage </th>";
//         coverageDetail += "<th> AccessType </th>";
        coverageDetail += "</tr>";
        for(failedTest of failedTests){
          coverageDetail += "<tr>";
          coverageDetail += "<td>" +  failedTest.location + "</td>";
          coverageDetail += "<td>" +  failedTest.shortMessage + "</td>";
//           coverageDetail += "<td>" +  coverage.coverage + "</td>";
          coverageDetail += "</tr>";
        }
        coverageDetail += "</table>"
        $("#overlayHeading2").html("<h2> Coverage Details <h2>");
        $("#overlayContent2").html(coverageDetail);
        showOverlay2();
      }


      var showMutationDetail = function(evt){
        pairs = [];
        currentImage = 0;
        var rowId = parseInt(evt.parentElement.getAttribute('rowId'));

        methodInfo = methods[rowId];

        currentMethodInfo = methodInfo;

        showOverlay_images();


        mutantFolder = '../' + methodInfo.runFolder.replace(/^.*(\\|\/|\:)/, '');
        
       // var subject = methodInfo.runFolder.split('/')[1];

        mutationRecords = Object.keys(methods[rowId].mutationRecordMap);
        for (mutationRecord of mutationRecords){
          testName = mutationRecord.substring(0, mutationRecord.lastIndexOf('_'));

          lineNumber = mutationRecord.substring(mutationRecord.lastIndexOf('_')+1, mutationRecord.length);
          
          limgSrc = traceFolder + '/' + testSuiteName + '/'+ testName + '/' + lineNumber + '.png';
          rimgSrc = mutantFolder + '/' + testSuiteName + '/' + testName + '/' + lineNumber +'.png';
          console.log(limgSrc);
          console.log(rimgSrc);

          pairs = pairs.concat({'state1':limgSrc, 'state2':rimgSrc, 'record':methods[rowId].mutationRecordMap[mutationRecord]});
        }
        updateStateForCurrentImage();
        showImage();

      }

      var getRowTemplate = function(rowId, methodInfo) {
        var statusIconImgBase64 = methodInfo.failed ? successImageBase64 : failureImageBase64;
        var successString = methodInfo.failed?"success": "failure";
        var statusMessage = methodInfo.failedTests ;
        var methodInfoString = methodInfo.failedTests;
        if(methodInfo.failedTests && methodInfo.failedTests.length>0){
            console.log(methodInfo);
            statusMessage = methodInfo.failedTests[0].location;
            methodInfoString = methodInfo.failedTests[0].shortMessage;
        }
         if(methodInfo.candidate.coverageMap){
            if(methodInfo.candidate.coverageMap.length>0){
                coverage = "Yes";
            }
            else{
                 coverage = "No";
            }
        }
        else{
           coverage = "Unknown";
        }
        var rowTemplate = `
          <div id="${rowId}" rowId=${rowId} class="row collapse all ${successString}">
        <div class="col-2 mut_type btn-primary" onclick="showMutationDetail(this)">${methodInfo.candidate.opString} </div>
        <div class="col-6 mut_detail btn-primary" onclick="showMutationDetail(this)"> 
        ${methodInfo.candidate.xpath}
        </div>
        <div class="col-2 testfailure_detail btn-primary" onclick="showTestDetail(this)"><img src="data:image/svg+xml;utf8;base64,${statusIconImgBase64}" width="16" height="16" alt="${methodInfo.failed}" title="${methodInfo.failed}" />
         ${statusMessage}</div>
        <div class="col-2 coverage_detail btn-primary" align="right" onclick="showCoverageDetail(this)">${coverage}</div>
          </div>
        `;

        return rowTemplate;
      }



       var getOverallResult = function(methods){
methodResults = methods.map(function(method){return {status: method.failed, duration: method.duration};});
//         totalDuration = methodResults.reduce(function(totalTime, result){return totalTime+result.duration;}, 0)

        killed = methodResults.filter(function(result){return result.status});
        alive = methodResults.filter(function(result){return !result.status});
//         skipped = methodResults.filter(function(result){return result.status.toUpperCase()==="SKIPPED"});     
        
        var testMethodInfoTemplate = `
         <div class="row">
           <div class="col "> <div class="btn btn-info" data-toggle="collapse" href=".all" aria-expanded="true" aria-controls=".all"> Total </div> <span class="badge badge-pill badge-info"> ${methodResults.length}</span> </div>
           <div class="col "> <div class="btn btn-primary" data-toggle="collapse" href=".success" aria-expanded="true" aria-controls=".success"> Killed </div> <span class="badge badge-pill badge-primary">${killed.length} </span> </div>
           <div class="col "> <div class="btn btn-danger" data-toggle="collapse" href=".failure" aria-expanded="true" aria-controls=".failure"> Alive </div> <span class="badge badge-pill badge-danger">${alive.length}</span>  </div>
        </div>
        `;
        return testMethodInfoTemplate;
      }

      var  traceFolder = '../../../../trace';
      
      var testSuiteName = `${testSuiteName}`;

      var jsonContents = `${diff_json}`;

      var parsedJson = JSON.parse(jsonContents);
//       var methodNames = Object.keys(parsedJson);
      var codeDiffElements = [];
      var methods = Object.values(parsedJson);


      var overall = document.querySelector("#overallResult");
      overall.innerHTML = getOverallResult(methods);
//       var overallResult = 


      for (var i = 0; i < methods.length; i++) {
        var methodInfo = methods[i];

        
        // Populate the rows of the table for summary
        var tbody = document.querySelector("#test-results-table");
        tbody.innerHTML += getRowTemplate(i, methodInfo);

       

      }

    $(document).ready(
      function(){

      $("#nextButton").click(loadNextImage);
      $("#prevButton").click(loadPreviousImage);
      $("#zoomInButton").click(zoomInImage);
      $("#zoomOutButton").click(zoomOutImage);
      $("#zoomValueField").on("keypress", function(e){
          if (e.keyCode == 13) {
        // Cancel the default action on keypress event
          e.preventDefault(); 
              setZoomValue($("#zoomValueField").val());
          }
      });
      
    }
  );
      
    </script>

  </body>

</html>